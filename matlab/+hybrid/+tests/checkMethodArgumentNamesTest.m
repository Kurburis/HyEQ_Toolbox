classdef checkMethodArgumentNamesTest < matlab.unittest.TestCase
   
    methods (Test)
       
        function testOneArg(testCase)
            import hybrid.internal.*
            checkMethodArgumentNames(testCase, ...
                {'oneArgFunction'}, ...
                {@(name) strcmp(name, 'arg1')}, ...
                {'Error: for function %s, expected arg1, instead %s'})
        end
        
        function testTwoArgs(testCase)
            import hybrid.internal.*
            checkMethodArgumentNames(testCase, ...
                {'twoArgFunction'}, ...
                {@(name) strcmp(name, 'arg1'), ...
                 @(name) strcmp(name, 'arg2')}, ...
                {''})
        end
        
        function testTwoArgsFirstWrong(testCase)
            import hybrid.internal.*
            fh = @() checkMethodArgumentNames(testCase, ...
                {'twoArgFunction'}, ...
                {@(name) false, @(name) true}, ...
                {''});
            testCase.verifyError(fh, 'Hybrid:InvalidMethodArgumentName')
        end
        
        function testTwoArgsSecondWrong(testCase)
            import hybrid.internal.*
            fh = @() checkMethodArgumentNames(testCase, ...
                {'twoArgFunction'}, ...
                {@(name) true, @(name) false}, ...
                {''});
            testCase.verifyError(fh, 'Hybrid:InvalidMethodArgumentName')
        end
        
        function testMoreArgsThanChecks(testCase)
            import hybrid.internal.*
            checkMethodArgumentNames(testCase, ...
                {'twoArgFunction'}, ...
                {@(name) true}, ...
                {''});
        end
        
        function testMoreChecksThanArgs(testCase)
            import hybrid.internal.*
            checkMethodArgumentNames(testCase, ...
                {'oneArgFunction'}, ...
                {@(name) true, @(name) isempty(name)}, ...
                {''});
        end
        
        function testMultipleFunctions(testCase)
            import hybrid.internal.*
            checkMethodArgumentNames(testCase, ...
                {'oneArgFunction', 'twoArgFunction'}, ...
                {@(name) true, @(name) true}, ...
                {''});
            
            fh = @() checkMethodArgumentNames(testCase, ...
                {'oneArgFunction', 'twoArgFunction'}, ...
                {@(name) true, @(name) false}, ...
                {''});
            testCase.verifyError(fh, 'Hybrid:InvalidMethodArgumentName')
        end

    end
    
    methods 
        function oneArgFunction(arg1) %#ok<*MANU>
        end
        function twoArgFunction(arg1, arg2) %#ok<*INUSD>
        end
        function threeArgFunction(arg1, arg2, arg3) %#ok<*INUSD>
        end
    end

end